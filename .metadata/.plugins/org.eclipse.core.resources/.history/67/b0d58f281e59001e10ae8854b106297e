package com.aurionpro.model;

import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertIterableEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.fail;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class MathUtilTest {
	MathUtil util;
	
	@BeforeAll
	static void initStatic() {
		System.out.println("Before All");
	}
	
	@AfterAll
	static void cleanStatic() {
		System.out.println("After All");
	}
	
	@BeforeEach
	void init() {
		util=new MathUtil();
		System.out.println("Before Each");
	}
	
	@AfterEach
	void cleanUp() {
		System.out.println("After clean up");
	}

	@Test
	@Disabled
	void test() {
		fail("Not yet implemented");
	}

	@Test
	@DisplayName("Addition of numbers")
	void testAddNumber() {
		MathUtil util = new MathUtil();
		double add = util.addNumbers(5, 5);
		assertEquals(10, add);
		System.out.println("Hello Amisha!");
		System.out.println("Addition is: " + add);
	}

	@Test
	void testFactorial() {
		MathUtil util = new MathUtil();
		double fact = util.factorial();
		assertEquals(120, fact);
		System.out.println("Factorial is: " + fact);
	}

	@Test
	void testdivideNumber() {
		MathUtil util = new MathUtil();
		int divide = util.divideNumbers(20, 10);
		assertEquals(2, divide);
		// assertTrue(2==divide);
		// assertFalse(2==divide);
	}

	void testArray() {
		int[] numbers1 = { 10, 20, 30, 40, 50 };
		int[] numbers2 = { 20, 30, 40, 50, 60 };
		MathUtil util = new MathUtil();
		assertArrayEquals(numbers2, util.addTenToArray(numbers1));

	}

	@Test
	void testArrayList() {
		Integer[] numbers1 = { 10, 20, 30, 40, 50 };
		List<Integer> inputList = Arrays.asList(numbers1);

		Integer[] numbers2 = { 10, 20, 30, 40, 50 };
		List<Integer> resultList = Arrays.asList(numbers2);

		assertIterableEquals(resultList, inputList);

	}

	@Test
	void testDivideNumbers_checkResult() {
		MathUtil util = new MathUtil();
		assertEquals(2, util.divideNumbers(10, 5));
	}

	@Test
	void testDivideNumbers_checkException() {
		MathUtil util = new MathUtil();
		assertThrows(ArithmeticException.class, () -> util.divideNumbers(20, 0));
	}

	void testDivideNumbers_checkMultipleResults() {
		MathUtil util = new MathUtil();
		assertAll(() -> assertEquals(2, util.divideNumbers(10, 5)), () -> assertEquals(5, util.divideNumbers(10, 2)),
				() -> assertEquals(1, util.divideNumbers(10, 10)), () -> assertEquals(10, util.divideNumbers(10, 1))

		);
	}
}
